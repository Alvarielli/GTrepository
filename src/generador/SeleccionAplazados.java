/*
        GNU GENERAL PUBLIC LICENSE (GPL)
            Version 3, 29 June 2007
        Copyright (C) Héctor Álvarez Castellano

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
package generador;

import static generador.Principal.limitarCadena;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import metodos.Metodos;
import partidos.Partido;
import partidos.PartidoAplazado;
import renders.RenderAplazado;

/**
 *
 * @author Hector
 */
public class SeleccionAplazados extends javax.swing.JDialog {

    //Variables de clase
    private static Calendario calendario;
    private DefaultTableModel modelo;
    private int anchoTabla = 1740;//Ponemos un valor fijo y nos evitamos problemas //TableJornada.getWidth();
    private int alturaColumna = 25;//Indica la altura de la columna
    private RenderAplazado render;
    private int jornada = 1;
    private Metodos metodos;//Clase necesaria para acceder a la lista de equipos
    private ArrayList<Partido> partidosAplazados = new ArrayList<>();//arraylist que contendrá los partidos aplazados
    private ArrayList<PartidoAplazado> partidosAplazadosAux = new ArrayList<>();//arraylist axiliar que contendrá los partidos adaptadores
    private int[] num = {8, 10, 8, 25, 25, 16, 8};//Anchura de los campos de la tabla
    private boolean mensaje = false;//Se utiliza para que el programa muestre el mensaje de error al introducir datos sólo una vez
    private Principal principal;//clase para traspasar los partidos aplazados a Principal
       
    //Constructor de clase
    public SeleccionAplazados(java.awt.Frame parent, boolean modal, Calendario calendario) {
        super(parent, modal);
        initComponents();
        this.calendario = calendario;
        //Código necesario para centrar el diálogo en pantalla
        setLocationRelativeTo(null);
        setTitle(java.util.ResourceBundle.getBundle("generador/Bundle_en_US").getString("SELECCIONAR LOS PARTIDOS QUE VAN A FORMAR PARTE DE LA JORNADA DE PARTIDOS APLAZADOS"));
        partidosAplazados.clear();//Reseteamos los partidos aplazados
        cargarTablaAplazados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButtonCancelarSA = new javax.swing.JButton();
        ButtonAceptarSA = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePartidos = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ButtonCancelarSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("generador/Bundle"); // NOI18N
        ButtonCancelarSA.setText(bundle.getString("SeleccionAplazados.ButtonCancelarSA.text")); // NOI18N
        ButtonCancelarSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelarSAActionPerformed(evt);
            }
        });

        ButtonAceptarSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonAceptarSA.setText(bundle.getString("SeleccionAplazados.ButtonAceptarSA.text_1")); // NOI18N
        ButtonAceptarSA.setToolTipText(bundle.getString("SeleccionAplazados.ButtonAceptarSA.toolTipText")); // NOI18N
        ButtonAceptarSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAceptarSAActionPerformed(evt);
            }
        });

        TablePartidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TablePartidos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addComponent(ButtonCancelarSA, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(ButtonAceptarSA, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(311, 311, 311))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCancelarSA, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonAceptarSA, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCancelarSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelarSAActionPerformed
        //Borramos todos los equipos que habíamos añadido al ArrayList
        partidosAplazados.clear();
        this.closeDialog(null);
    }//GEN-LAST:event_ButtonCancelarSAActionPerformed

    private void ButtonAceptarSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAceptarSAActionPerformed
        guardarTablaAplazados();//guardamos los partidos en el ArrayList
        //Comprobamos que haya al menos un partido seleccionado
        if(partidosAplazados.size() <= 0){
            JOptionPane.showMessageDialog(this, "No se han seleccionado partidos para aplazar", "Error al seleccionar los partidos", JOptionPane.WARNING_MESSAGE, null);
        }else{
        ((Principal)getParent()).setPartidosAplazadosPr(partidosAplazados);
        this.closeDialog(null);
        }       
    }//GEN-LAST:event_ButtonAceptarSAActionPerformed

     /**
     * Carga los datos de las jorandas en la tabla
     */
    public void cargarTablaAplazados(){
        TablePartidos.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);//Reasignamos el AutoAjustado
        //Textos para las columnas
        String[] columnasLocal = {"JORNADA", "FECHA", "HORA", "EQUIPO LOCAL", "EQUIPO VISITANTE", "CAMPO", "APLAZAR"};
        //Indicamos que columnas serán editables
        final boolean[] canEdit = new boolean [] {false, false, false, false, false, false, true};
        //Definimos los anchos de las columnas y los asignamos como tamaño preferente
        int[] anchos = {(anchoTabla*num[0])/100, (anchoTabla*num[1])/100, (anchoTabla*num[2])/100, (anchoTabla*num[3])/100, (anchoTabla*num[4])/100, (anchoTabla*num[5])/100, (anchoTabla*num[6])/100};
        //Modelo de tabla por defecto
        setModelo(new DefaultTableModel(columnasLocal, 0){
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
                
        //Lo primero de todo, cada vez que se carga el método que pinta la tabla, borramos las filas que pudiera haber escritas
        TablePartidos.removeAll();
        //modelo.getDataVector().removeAllElements();
        TablePartidos.repaint();//Repinta el elemento en cuestión repaint()???
        String[] partidosAp = new String[7];
        //Ahora procedemos a cargar la lista de partidos aplazados
        for (int i = 0; i < calendario.jornadas.size(); i++) {//cargamos todas las jornadas
            //Creamos una variable Jornada y obtenemos la jornada indicada de nuestro objeto calendario
            Jornada J = calendario.jornadas.get(jornada - 1);//-1 porque es un índice
            //Ahora usamos el for-each y obtenemos la lista de partidos de este objeto Jornada
            for (Partido partido :(ArrayList<Partido>)J.getListaPartidos()){              
                partidosAp[0] = Integer.toString(jornada);
                partidosAp[1] = partido.getFecha();
                partidosAp[2] = partido.getHora();
                partidosAp[3] = partido.getLocal();
                partidosAp[4] = partido.getVisitante();
                partidosAp[5] = partido.getPista();
                partidosAp[6] = "NO";//Campo booleano aplazar
                //Si el local o el visitante descansan, lo añadimos a la etiqueta que lo muestra, en lugar de añadir la fila a la tabla
                if(partido.getLocal().equalsIgnoreCase("EquipoFantasma")){
                    //Ignoramos el partido, el equipo que descansa nunca se añadirá a una jornada de aplazados
                }else if(partido.getVisitante().equalsIgnoreCase("EquipoFantasma")){
                    //Ignoramos el partido, el equipo que descansa nunca se añadirá a una jornada de aplazados
                }else{                   
                    getModelo().addRow(partidosAp); 
                }
            }//end for
            jornada++;
        }//end for calendario
        
        //Indicamos a la tabla cual es su modelo
        TablePartidos.setModel(getModelo());
        asignarAplazar(TablePartidos, TablePartidos.getColumnModel().getColumn(6));
        //Le asignamos el render al calendario
        render = new RenderAplazado();
        TablePartidos.setDefaultRenderer(Object.class, render);
        TablePartidos.setRowHeight(alturaColumna);//Método que cambia la altura de las filas del JTable (funciona una vez asignado el modelo) 
        for (int i = 0; i < columnasLocal.length; i++) {
            TablePartidos.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]); 
        }
        //Indicamos que las columnas no se puedan mover
        TablePartidos.getTableHeader().setReorderingAllowed(false);
    }//End of cargarTablaAplazados()
    
    /**
     * Recoge los datos que se están mostrando en la tabla y los pasa a su ArrayList correspondiente
     */
    public void guardarTablaAplazados(){
        int filas =  TablePartidos.getRowCount();//número de filas en la tabla
        //Por cada fila guardo los datos en el partido correspondiente del ArrayList 
        for (int i = 0; i < filas; i++) {
            //Obtenemos el partido en el ArrayList y le asignamos los nuevos datos
             PartidoAplazado P = new PartidoAplazado("local", "visitante");//Partido Aplazado es una clase adaptadora que nos ayuda a evaluar que partidos se aplazan
             P.setJornada(validarEnteros(getModelo().getValueAt(i,0).toString().trim()));
             P.setFecha(limitarCadena(getModelo().getValueAt(i,1).toString().trim(), 30, false));//el toString() para que lo coja como una cadena
             P.setHora(limitarCadena(getModelo().getValueAt(i,2).toString().trim(), 30, false));
             P.setLocal(limitarCadena(getModelo().getValueAt(i,3).toString().trim(), 40, false));
             P.setVisitante(limitarCadena(getModelo().getValueAt(i,4).toString().trim(), 40, false));
             P.setPista(limitarCadena(getModelo().getValueAt(i,5).toString().trim(), 30, false));
             P.setAplazar(limitarCadena(getModelo().getValueAt(i,6).toString().trim(), 30, false));
             //Si el partido está seleccionado lo añadimos al arraylist auxiliar
             if(P.getAplazar().equalsIgnoreCase("SI")){                    
                partidosAplazadosAux.add(P);//Añadimos el partido a la lista de partidos aplazados
             }
         }
            //Ahora recorremos todos los partidos del calendario y si coinciden la jornada, el equipo local y el visitante añadimos el Partido normal al arraylist de partidos aplazados
            jornada = 1;//reseteamos la jornada
            for (int j = 0; j < calendario.jornadas.size(); j++) {//cargamos todas las jornadas
                //Creamos una variable Jornada y obtenemos la jornada indicada de nuestro objeto calendario
                Jornada J = calendario.jornadas.get(jornada - 1);//-1 porque es un índice
                //int filas =  TablePartidos.getRowCount();//número de filas en la tabla
                //Por cada fila guardo los datos en el partido correspondiente del ArrayList 
                for (int i = 0; i < J.getListaPartidos().size(); i++) {
                //for (int i = 0; i < filas/calendario.jornadas.size(); i++) {J.getListaPartidos().size()
                    //Obtenemos el partido en el ArrayList y le asignamos los nuevos datos
                    Partido P = (Partido) J.partidos.get(i);
                    for (int k = 0; k < partidosAplazadosAux.size(); k++) {
                        //Si coinciden lo añadimos al arraylist de partidos aplazados
                        if(P.getLocal().equalsIgnoreCase(partidosAplazadosAux.get(k).getLocal()) && P.getVisitante().equalsIgnoreCase(partidosAplazadosAux.get(k).getVisitante())){
                            partidosAplazados.add(P);
                        }//end if
                    }//end for k                 
                 }//end for i
                jornada++;           
                //Tras acabar el for y recorrer todos los resultados ponemos el mensaje como false de nuevo
                this.mensaje = false;
            }//end for calendario
    }//End of guardarTablaAplazados() 
    
    /**
     * Recibe los goles en formato cadena y comprueba que son un número entero positivo
     * @param cadena
     * @return 
     */
    public int validarEnteros(String cadena){
        int numero;
        if(!cadena.equalsIgnoreCase("")){
        //Si la casilla está vacía ignoramos el chequeo, pues no hay información que comprobar
            try{
               //Casteamos la cadena pasada
              numero = Integer.parseInt(cadena);


              if(numero < 0){
                //Si lo recibido es un número negativo
                if(!this.mensaje){//if esclusivamente para mostrar o no el mensaje
                    JOptionPane.showMessageDialog(TablePartidos, "Los Goles deben contener números enteros no negativos", "Error al insertar los datos de la tabla", JOptionPane.ERROR_MESSAGE, null);
                    this.mensaje = true;
                }
                numero = -1;
                return numero;
              }else{
                return numero;
              }
            }catch(NumberFormatException nfe){
                //Si lo recibido no es un número entero guardamos un -1 y mostramos un mensaje de error
                if(!this.mensaje){//if esclusivamente para mostrar o no el mensaje
                    JOptionPane.showMessageDialog(TablePartidos, "Los Goles deben contener números enteros no negativos", "Error al insertar los datos de la tabla", JOptionPane.ERROR_MESSAGE, null);
                    this.mensaje = true;
                }
                numero = -1;
                return numero;
            }
        }//End if de chequeo de cadena
            return -1;//Devolvemos el número que será tratado por nuestro programa
    }//End of validarEnteros()
     /**
      * Cierra la pantalla de selección de partidos aplazados
        @param evt      
     */
     private void closeDialog(java.awt.event.WindowEvent evt){
         setVisible(false);
         dispose();
     }//End of dispose()
     
     /**
      * Método que asigna un JComboBox a la columna de la prórroga
      * @param tabla
      * @param columna 
      */
     public void asignarAplazar(JTable tabla, TableColumn columna){
         String[] valores = {"SI", "NO"};
         JComboBox combo = new JComboBox(valores);
         columna.setCellEditor(new DefaultCellEditor(combo));
     }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeleccionAplazados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeleccionAplazados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeleccionAplazados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeleccionAplazados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SeleccionAplazados dialog = new SeleccionAplazados(new javax.swing.JFrame(), true, calendario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAceptarSA;
    private javax.swing.JButton ButtonCancelarSA;
    private javax.swing.JTable TablePartidos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the modelo
     */
    public DefaultTableModel getModelo() {
        return modelo;
    }

    /**
     * @param modelo the modelo to set
     */
    public void setModelo(DefaultTableModel modelo) {
        this.modelo = modelo;
    }
}
