/*
        GNU GENERAL PUBLIC LICENSE (GPL)
            Version 3, 29 June 2007
        Copyright (C) Héctor Álvarez Castellano

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
package generador;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Hector
 */
public class TorneoDialog extends javax.swing.JDialog {
          
    //Variables de clase
    private String nuevoParticipante;
    private boolean validacion;
    /* El ArrayList es de tipo String porque sólo necesitamos el nombre de momento, y no podemos inicializar
       la clase Equipo porque es abstracta, de momento no sabemos el deporte que se va a jugar, por ello, 
       guardamos el nombre y más adelante en Principal (seleccionClaseEquipo()) elegimos el tipo de Equipo */
    private static ArrayList<String> equipoStringLista = new ArrayList<>();//Creamos una lista de equipos para manejar los que incluimos
    private static TorneoLista torneoLista = new TorneoLista();//añadiremos el torneo al ArrayList
    DefaultListModel modeloLista = new DefaultListModel();
    DefaultListCellRenderer cellRenderer;//Se necesita para centrar los componentes del JList
    private Principal principal = new Principal();
    private int tipoTorneo;//Guarda el tipo de torneo que utilizaremos
    private int sets;//Contiene el número de sets que se jugaran
    
    //Necesarias para los equipos opuestos
    private EquiposOpuestos equiposOpuestos;
    private ArrayList<String> auxEquipoStringLista = new ArrayList<>();//Usamos el arraylist auxiliar para pasarlo a la ventana de equipos opuestos
    private ArrayList<String> izquierdaEO = new ArrayList<>();//recupera el valor de la lista izquierda de equipos opuestos
    private ArrayList<String> derechaEO = new ArrayList<>();//recupera el valor de la lista derecha de equipos opuestos
    /**
     * Creates new form TorneoDialog
     * @param parent
     * @param modal
     */
    public TorneoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //Código necesario para centrar el diálogo en pantalla
        setLocationRelativeTo(null);
        setTitle(java.util.ResourceBundle.getBundle("generador/Bundle_en_US").getString("GENERAR UN NUEVO TORNEO"));
        //Repintamos la lista de equipos
        refrescarLista();
        //Ocultamos los paneles opcionales
        PanelSets.setVisible(false);
        PanelEliminatorias.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoBotones1 = new javax.swing.ButtonGroup();
        GrupoBotonesSets = new javax.swing.ButtonGroup();
        LabelDeportes = new javax.swing.JLabel();
        ComboBoxDeportes = new javax.swing.JComboBox();
        RadioButtonLiga = new javax.swing.JRadioButton();
        RadioButtonEliminatorias = new javax.swing.JRadioButton();
        LabelTipoTorneo = new javax.swing.JLabel();
        LabelVuelta = new javax.swing.JLabel();
        CheckBoxIdaVuelta = new javax.swing.JCheckBox();
        LabelTitulo = new javax.swing.JLabel();
        ButtonCancelar = new javax.swing.JButton();
        ButtonAceptar = new javax.swing.JButton();
        LabelNombreTorneo = new javax.swing.JLabel();
        TextFieldNombreTorneo = new javax.swing.JTextField();
        ButtonAnadir = new javax.swing.JButton();
        ButtonQuitar = new javax.swing.JButton();
        LabelIntroduzca = new javax.swing.JLabel();
        TextFieldIntroduzca = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListEquipos = new javax.swing.JList();
        PanelSets = new javax.swing.JPanel();
        LabelSets = new javax.swing.JLabel();
        RadioButton3sets = new javax.swing.JRadioButton();
        RadioButton5sets = new javax.swing.JRadioButton();
        PanelEliminatorias = new javax.swing.JPanel();
        CheckBoxTercerCuartoPuesto = new javax.swing.JCheckBox();
        CheckBoxSorteo = new javax.swing.JCheckBox();
        ButtonEquiposOpuestos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        LabelDeportes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("generador/Bundle"); // NOI18N
        LabelDeportes.setText(bundle.getString("TorneoDialog.LabelDeportes.text")); // NOI18N

        ComboBoxDeportes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboBoxDeportes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fútbol", "Baloncesto", "Tenis", "Fútbol Sala", "Balonmano", "Waterpolo", "Hockey Patines", "Hockey Hierba", "Hockey Hielo", "Rugby", "Bádminton", "Frontenis", "Tenis de Mesa", "Pádel", "Fútbol Americano", "Voleibol", "Voley Playa", "Ajedrez", "Béisbol", "Curling" }));
        ComboBoxDeportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxDeportesActionPerformed(evt);
            }
        });

        GrupoBotones1.add(RadioButtonLiga);
        RadioButtonLiga.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RadioButtonLiga.setSelected(true);
        RadioButtonLiga.setText(bundle.getString("TorneoDialog.RadioButtonLiga.text")); // NOI18N
        RadioButtonLiga.setToolTipText(bundle.getString("TorneoDialog.RadioButtonLiga.toolTipText")); // NOI18N
        RadioButtonLiga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonLigaActionPerformed(evt);
            }
        });

        GrupoBotones1.add(RadioButtonEliminatorias);
        RadioButtonEliminatorias.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RadioButtonEliminatorias.setText(bundle.getString("TorneoDialog.RadioButtonEliminatorias.text")); // NOI18N
        RadioButtonEliminatorias.setToolTipText(bundle.getString("TorneoDialog.RadioButtonEliminatorias.toolTipText")); // NOI18N
        RadioButtonEliminatorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonEliminatoriasActionPerformed(evt);
            }
        });

        LabelTipoTorneo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LabelTipoTorneo.setText(bundle.getString("TorneoDialog.LabelTipoTorneo.text")); // NOI18N

        LabelVuelta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LabelVuelta.setText(bundle.getString("TorneoDialog.LabelVuelta.text")); // NOI18N

        CheckBoxIdaVuelta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckBoxIdaVuelta.setText(bundle.getString("TorneoDialog.CheckBoxIdaVuelta.text")); // NOI18N
        CheckBoxIdaVuelta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxIdaVueltaActionPerformed(evt);
            }
        });

        LabelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTitulo.setText(bundle.getString("TorneoDialog.LabelTitulo.text")); // NOI18N

        ButtonCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonCancelar.setText(bundle.getString("TorneoDialog.ButtonCancelar.text")); // NOI18N
        ButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelarActionPerformed(evt);
            }
        });

        ButtonAceptar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonAceptar.setText(bundle.getString("TorneoDialog.ButtonAceptar.text")); // NOI18N
        ButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAceptarActionPerformed(evt);
            }
        });

        LabelNombreTorneo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LabelNombreTorneo.setText(bundle.getString("TorneoDialog.LabelNombreTorneo.text")); // NOI18N

        TextFieldNombreTorneo.setToolTipText(bundle.getString("TorneoDialog.TextFieldNombreTorneo.toolTipText")); // NOI18N

        ButtonAnadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/plus.png"))); // NOI18N
        ButtonAnadir.setToolTipText(bundle.getString("TorneoDialog.ButtonAnadir.toolTipText")); // NOI18N
        ButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAnadirActionPerformed(evt);
            }
        });

        ButtonQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/minus.png"))); // NOI18N
        ButtonQuitar.setToolTipText(bundle.getString("TorneoDialog.ButtonQuitar.toolTipText")); // NOI18N
        ButtonQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonQuitarActionPerformed(evt);
            }
        });

        LabelIntroduzca.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LabelIntroduzca.setText(bundle.getString("TorneoDialog.LabelIntroduzca.text")); // NOI18N

        TextFieldIntroduzca.setToolTipText(bundle.getString("TorneoDialog.TextFieldIntroduzca.toolTipText")); // NOI18N
        TextFieldIntroduzca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldIntroduzcaActionPerformed(evt);
            }
        });
        TextFieldIntroduzca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextFieldIntroduzcaKeyPressed(evt);
            }
        });

        ListEquipos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ListEquipos.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ListEquiposMouseMoved(evt);
            }
        });
        jScrollPane2.setViewportView(ListEquipos);

        PanelSets.setToolTipText(bundle.getString("TorneoDialog.PanelSets.toolTipText")); // NOI18N

        LabelSets.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LabelSets.setText(bundle.getString("TorneoDialog.LabelSets.text")); // NOI18N

        GrupoBotonesSets.add(RadioButton3sets);
        RadioButton3sets.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RadioButton3sets.setSelected(true);
        RadioButton3sets.setText(bundle.getString("TorneoDialog.RadioButton3sets.text")); // NOI18N

        GrupoBotonesSets.add(RadioButton5sets);
        RadioButton5sets.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RadioButton5sets.setText(bundle.getString("TorneoDialog.RadioButton5sets.text")); // NOI18N
        RadioButton5sets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton5setsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelSetsLayout = new javax.swing.GroupLayout(PanelSets);
        PanelSets.setLayout(PanelSetsLayout);
        PanelSetsLayout.setHorizontalGroup(
            PanelSetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSetsLayout.createSequentialGroup()
                .addComponent(LabelSets, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButton3sets)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RadioButton5sets)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PanelSetsLayout.setVerticalGroup(
            PanelSetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(LabelSets, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(RadioButton3sets)
                .addComponent(RadioButton5sets))
        );

        CheckBoxTercerCuartoPuesto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckBoxTercerCuartoPuesto.setText(bundle.getString("TorneoDialog.CheckBoxTercerCuartoPuesto.text")); // NOI18N

        CheckBoxSorteo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckBoxSorteo.setText(bundle.getString("TorneoDialog.CheckBoxSorteo.text")); // NOI18N

        javax.swing.GroupLayout PanelEliminatoriasLayout = new javax.swing.GroupLayout(PanelEliminatorias);
        PanelEliminatorias.setLayout(PanelEliminatoriasLayout);
        PanelEliminatoriasLayout.setHorizontalGroup(
            PanelEliminatoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEliminatoriasLayout.createSequentialGroup()
                .addComponent(CheckBoxSorteo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CheckBoxTercerCuartoPuesto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelEliminatoriasLayout.setVerticalGroup(
            PanelEliminatoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEliminatoriasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelEliminatoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBoxSorteo)
                    .addComponent(CheckBoxTercerCuartoPuesto))
                .addContainerGap())
        );

        ButtonEquiposOpuestos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/equipos_opuestos.png"))); // NOI18N
        ButtonEquiposOpuestos.setToolTipText(bundle.getString("TorneoDialog.ButtonEquiposOpuestos.toolTipText")); // NOI18N
        ButtonEquiposOpuestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEquiposOpuestosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(LabelDeportes)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ComboBoxDeportes, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(LabelNombreTorneo)
                                    .addGap(18, 18, 18)
                                    .addComponent(TextFieldNombreTorneo, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ButtonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelTipoTorneo)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RadioButtonEliminatorias)
                                    .addComponent(RadioButtonLiga)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelVuelta)
                                .addGap(29, 29, 29)
                                .addComponent(CheckBoxIdaVuelta))
                            .addComponent(PanelSets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PanelEliminatorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ButtonQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ButtonEquiposOpuestos, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TextFieldIntroduzca, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelIntroduzca, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LabelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelNombreTorneo)
                            .addComponent(TextFieldNombreTorneo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelDeportes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxDeportes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ButtonAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelIntroduzca, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldIntroduzca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(RadioButtonLiga)
                                .addGap(15, 15, 15)
                                .addComponent(RadioButtonEliminatorias)
                                .addGap(18, 18, 18)
                                .addComponent(PanelEliminatorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addComponent(PanelSets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LabelVuelta)
                                    .addComponent(CheckBoxIdaVuelta))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ButtonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(LabelTipoTorneo)
                                            .addComponent(ButtonQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ButtonEquiposOpuestos, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Cierra el menú de torneo
     * @param evt 
     */
    private void closeDialog(java.awt.event.WindowEvent evt){
        setVisible(false);
        dispose();
    }
    
    private void ComboBoxDeportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxDeportesActionPerformed
        //Si la opción seleccionada es Tenis mostramos el panel de los sets
        if (ComboBoxDeportes.getSelectedIndex() == 2){
            PanelSets.setVisible(true);
        }else{
            PanelSets.setVisible(false);
        }
        
        //Para que el ajedrez aparezca con ida y vuelta marcada (pues juegan con blancas y negras)
        if (ComboBoxDeportes.getSelectedIndex() == 17){
            CheckBoxIdaVuelta.setSelected(true);
        }else{
            CheckBoxIdaVuelta.setSelected(false);
        }
    }//GEN-LAST:event_ComboBoxDeportesActionPerformed

    private void ButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAceptarActionPerformed
        //Lo primero de todo comprobamos que hay al menos dos equipos añadidos para jugar un torneo (y que no metan más de mil como seguridad para que no revienten el programa, y para poner un limite a las eliminatorias)
        if(equipoStringLista.size() > 1000){
            JOptionPane.showMessageDialog(this, "Torneo suspendido por incomparecencia de los participantes, al parecer, eran todos imaginarios", "Error al intentar crear un torneo (Se superó el límite de participantes)", JOptionPane.WARNING_MESSAGE, null);
        }else{
            if(equipoStringLista.size() < 3){
                JOptionPane.showMessageDialog(this, "Debe haber al menos tres participantes", "Error al intentar crear un torneo", JOptionPane.WARNING_MESSAGE, null);
            }else{
                if(TextFieldNombreTorneo.getText().equals("")){
                    JOptionPane.showMessageDialog(this, "Debe asignar un nombre al torneo", "Error al intentar crear un torneo", JOptionPane.WARNING_MESSAGE, null);
                }else{
                    //Comprobamos los RadioButtons pulsados para mandar la información correcta
                    if(RadioButtonLiga.isSelected()){
                        tipoTorneo = 1;
                    }else if(RadioButtonEliminatorias.isSelected()){
                        tipoTorneo = 2;
                    }else{
                        System.out.println("Error al seleccionar un tipo de torneo válido");
                    }
                    //Ahora pasamos a comprobar el valor opcional sets
                    if(RadioButton3sets.isSelected()){
                       sets = 3;
                    }else if(RadioButton5sets.isSelected()){
                        sets = 5;
                    }else{
                        sets = 0;
                    }
                    //Tenemos en cuenta si se ha seleccionado Voleibol o Tenis de Mesa y ponemos los sets a 5 (ya que estos dos no tienen opción de RadioButton)
                    if (ComboBoxDeportes.getSelectedIndex() == 12 || ComboBoxDeportes.getSelectedIndex() == 15){
                        sets = 5;
                    }                   
                    /********** Recogemos los datos introducidos por el usuario en un objeto Torneo y usamos un contructor distinto en función de si hay sets o no **********/

                    //Comprobamos en primer lugar si el usuario eligión eliminatorias y elegimos el constructor según este criterio
                    if(RadioButtonEliminatorias.isSelected()){
                        //Si es un deporte con sets utilizamos el constructor con sets
                        if(sets > 0){
                            Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, CheckBoxSorteo.isSelected(), CheckBoxTercerCuartoPuesto.isSelected(), sets);
                            //Añadimos el torneo al ArrayList
                            torneoLista.torneos.add(torneo);
                            ((Principal)getParent()).generarCalendario(torneo);
                        }else{
                            sets = 0;
                            Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, CheckBoxSorteo.isSelected(), CheckBoxTercerCuartoPuesto.isSelected(), sets);
                            //Añadimos el torneo al ArrayList
                            torneoLista.torneos.add(torneo);
                            ((Principal)getParent()).generarCalendario(torneo);
                        }
                    }else{              
                        //Recogemos los datos introducidos por el usuario para Liga con o sin sets
                        if(sets > 0){
                            //Comprobamos si hay equipos opuestos asignados
                            if(izquierdaEO.size() > 0 && derechaEO.size() > 0){
                                Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, sets, izquierdaEO, derechaEO);
                                //Añadimos el torneo al ArrayList
                                torneoLista.torneos.add(torneo);
                                ((Principal)getParent()).generarCalendario(torneo);
                            }else{
                                Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, sets);
                                //Añadimos el torneo al ArrayList
                                torneoLista.torneos.add(torneo);
                                ((Principal)getParent()).generarCalendario(torneo);
                            }//end if equipos opuestos
                        }else{
                            //Comprobamos si hay equipos opuestos asignados
                            if(izquierdaEO.size() > 0 && derechaEO.size() > 0){
                                sets = 0;
                                Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, sets, izquierdaEO, derechaEO);
                                //Añadimos el torneo al ArrayList
                                torneoLista.torneos.add(torneo);
                                ((Principal)getParent()).generarCalendario(torneo);
                            }else{
                                sets = 0;
                                Torneo torneo = new Torneo(TextFieldNombreTorneo.getText().trim(), equipoStringLista.size(), ComboBoxDeportes.getSelectedIndex(), tipoTorneo, CheckBoxIdaVuelta.isSelected(), equipoStringLista, sets);
                                //Añadimos el torneo al ArrayList
                                torneoLista.torneos.add(torneo);
                                ((Principal)getParent()).generarCalendario(torneo);
                            }
                        }//end if equipos opuestos
                    }//end if del RadioButton
                    this.closeDialog(null);
                }
            }//end if más de 2 equipos    
        }//end if 1000 equipos
    }//GEN-LAST:event_ButtonAceptarActionPerformed

    private void ButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelarActionPerformed
        //Borramos todos los equipos que habíamos añadido al ArrayList Equipos
        equipoStringLista.clear();
        //Cerramos el diálogo y volvemos a la pantalla original
        this.closeDialog(null);
    }//GEN-LAST:event_ButtonCancelarActionPerformed

    private void ButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnadirActionPerformed
         anadirParticipante();
    }//GEN-LAST:event_ButtonAnadirActionPerformed

    private void ButtonQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonQuitarActionPerformed
        int indice = ListEquipos.getSelectedIndex();
        if(indice > 0){
            //Convertimos en cadena el Objeto valor pasado (que sabemos que es un nombre)
            String borrarParticipante = ListEquipos.getSelectedValue().toString();
            boolean validarBorrar = borrarValidar(borrarParticipante, equipoStringLista);
            if(validarBorrar){
                modeloLista.remove(indice);
                //recomponerIndices(equipoStringLista);
                //verArray();
            }//fin if
        }else{
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún participante.", "Error al borrar un participante", JOptionPane.WARNING_MESSAGE, null);
        }//fin if  
    }//GEN-LAST:event_ButtonQuitarActionPerformed

    private void TextFieldIntroduzcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldIntroduzcaActionPerformed

    }//GEN-LAST:event_TextFieldIntroduzcaActionPerformed

    private void ListEquiposMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListEquiposMouseMoved
        //Evento del ratón que nos permite la posición de cada elemento de la lista de equipos
        //Obtenemos el índice del punto de la lista en el que se encuentra el ratón
        int indice = ListEquipos.locationToIndex(evt.getPoint());
        if (indice > 0) {
            ListEquipos.setToolTipText(null);
            String text = (String)
            modeloLista.getElementAt(indice);
            ListEquipos.setToolTipText(indice + " - " + text);
        }
    }//GEN-LAST:event_ListEquiposMouseMoved

    private void TextFieldIntroduzcaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldIntroduzcaKeyPressed
        if( evt.getKeyCode() == KeyEvent.VK_ENTER){
            //Aquí va el código que activa el Boton Añadir tras pulsar Enter
            anadirParticipante();
        }
    }//GEN-LAST:event_TextFieldIntroduzcaKeyPressed

    private void RadioButton5setsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton5setsActionPerformed
      //
    }//GEN-LAST:event_RadioButton5setsActionPerformed

    private void RadioButtonEliminatoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonEliminatoriasActionPerformed
        PanelEliminatorias.setVisible(true);
    }//GEN-LAST:event_RadioButtonEliminatoriasActionPerformed

    private void RadioButtonLigaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonLigaActionPerformed
          PanelEliminatorias.setVisible(false);
    }//GEN-LAST:event_RadioButtonLigaActionPerformed

    private void CheckBoxIdaVueltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxIdaVueltaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxIdaVueltaActionPerformed

    private void ButtonEquiposOpuestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEquiposOpuestosActionPerformed
        //El segundo parámetro a "true" indica que el diálogo va a ser modal, el tercero le pasa los participantes inscritos a la clase EquiposOpuestos
        auxEquipoStringLista = (ArrayList<String>) equipoStringLista.clone();
        EquiposOpuestos equiposOpuestosDialog = new EquiposOpuestos(this, true, auxEquipoStringLista);
        equiposOpuestosDialog.setVisible(true);
    }//GEN-LAST:event_ButtonEquiposOpuestosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TorneoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TorneoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TorneoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TorneoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                TorneoDialog dialog = new TorneoDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
     * Añade el elemento a la lista de Equipos
     */
     public void refrescarLista(){
        //Añade el participante a la lista
        modeloLista.addElement(getNuevoParticipante());
        //Asignar valores negrita, center ese tipo de cosas, decoración
        ListEquipos.setBackground(new Color(230, 230, 230));
        ListEquipos.setForeground(new Color(65, 65, 65));
        ListEquipos.setFont(new Font("Tahoma", Font.BOLD, 14));
        //Necesario para modificar algunas opciones del JList
        /*cellRenderer = (DefaultListCellRenderer)ListEquipos.getCellRenderer();
        cellRenderer.setHorizontalAlignment(SwingConstants .CENTER);*/
        //Enviamos los datos a nuestro JList
        this.ListEquipos.setModel(modeloLista);
    }
    
     /**
      * Comprueba que se ha indicado algún texto y que ese texto no esté repetido en el ArrayList equipos, de ser así añade un participante al ArrayList y al componente Listequipos
      * @param nombre
      * @param participantes
      * @param numeroFilas
      * @return 
      */
    public boolean validarParticipante(String nombre, ArrayList<String> participantes, int numeroFilas){
        //Si se introduce un texto vacío le hacemos saber al usuario que no está permitido
        if(nombre.equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "No introdujo ningún nombre en el campo de texto.", "Error al incluir un participante", JOptionPane.WARNING_MESSAGE, null);
            return false;
        }//Comprobamos que el usuario no introduce el nombre EquipoFantasma, que es el que usaremos para indicar que equipo descansa en los torneos con equipos impares
        if(nombre.equalsIgnoreCase("EquipoFantasma") || nombre.equalsIgnoreCase("descansa")){
            JOptionPane.showMessageDialog(this, "El nombre indicado no está permitido.", "Error al incluir un participante", JOptionPane.ERROR_MESSAGE, null);
            return false;
        }else{
            //Recorremos el ArrayList con un Iterador para comprobar que el nombre del equipo no está repetido
            Iterator<String> it = participantes.iterator();
            while(it.hasNext()){
               if(it.next().equalsIgnoreCase(nombre)){
                   JOptionPane.showMessageDialog(this, "<html>El participante <b>" + nombre + "</b> ya ha sido incluido</html>", "Error al incluir un participante", JOptionPane.WARNING_MESSAGE, null);
                   return false;
               }              
           }//fin while
           return true;
        }      
    }//fin validarParticipante()
    
    /**
     * Comprueba si el valor seleccionado de la lista (su nombre) coincide con el nombre de un elemento del ArrayList equipos y de ser así lo elimina
     * @param nombre
     * @param participantes
     * @return 
     */
    public boolean borrarValidar(String nombre, ArrayList<String> participantes){
        if(nombre.equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún texto.", "Error al borrar un participante", JOptionPane.WARNING_MESSAGE, null);
            return false;
        }else{
            //Recorremos el ArrayList con un Iterador para comprobar que el nombre del equipo no está repetido
            Iterator<String> it = participantes.iterator();
            while(it.hasNext()){
               if(it.next().equalsIgnoreCase(nombre)){
                   it.remove();//Elimina el elemento que tiene seleccionado en este momento
                   JOptionPane.showMessageDialog(this, "<html>El participante <b>" + nombre + "</b> fue eliminado de la lista", "Error al borrar un participante</html>", JOptionPane.INFORMATION_MESSAGE, null);
                   return true;
               }              
           }//fin while
           JOptionPane.showMessageDialog(this, "No se encontró el participante seleccionado", "Error al borrar un participante", JOptionPane.WARNING_MESSAGE, null);
           return false;
        }
    }//fin borrarValidar()
    
    /**
     * Reasigna los indices (la propiedad número) a los participantes acorde a su posición en la lista de equipos
     * @param participantes 
     */
    /*public void recomponerIndices(ArrayList<String> participantes){
        int numero = 1;
        //Recorremos el ArrayList con un Iterador
            Iterator<String> it = participantes.iterator();
            while(it.hasNext()){
              //Empezamos la cuenta en 1 y por cada elemento que pasa le añadimos uno, asignando así su número correspondiente  
              it.next().setNumero(numero);
              numero++;
           }//fin while
    }*/
    
    /**
     * Añade un participante al ArrayList y refresca la lista (lo saco fuera del botón por que así es más fácil hacer que funcione el KeyEvent ENTER del JTextField)
     */
    public void anadirParticipante(){
        //Comprobamos que no se repita el participante introducido y de ser así lo añade al ArrayList equipos de EquipoLista
         setNuevoParticipante(limitarCadena(TextFieldIntroduzca.getText().trim(), 40, false));
         validacion = validarParticipante(getNuevoParticipante(), equipoStringLista, equipoStringLista.size());
         if(validacion){
         //Si el nombre está permitido lo añadimos al ArrayList
         //int numero = equipoStringLista.size()+1;//Coloca el siguiente número de fila al equipo añadido
         String equipo = getNuevoParticipante();
            equipoStringLista.add(equipo);
         this.refrescarLista();
         TextFieldIntroduzca.setText("");//Vaciamos el campo de texto tras añadir el equipo
        }
    }
    
    /*public void verArray(){
        for (Equipo equipo : equipoLista.equipos)  
        System.out.println("Nombre: " + equipo.getNombre() + "\t Número: " + equipo.getNumero());  
    } */ 
    
    /**
     * Método que valida la longitud de la cadena
     * @param cadena
     * @param limite
     * @param mensaje
     * @return 
     */
    public String limitarCadena(String cadena, int limite, boolean mensaje){
        //Si esta bien devolvemos la cadena, y si excede el límite la devuelve hasta el límite
        if(cadena.length() > limite){
            if(mensaje){
                JOptionPane.showMessageDialog(null, "La cadena excede el número de caracteres permitidos. Máximo " + limite + " caracteres", "Error al ingresar un dato",JOptionPane.WARNING_MESSAGE);
            }
            cadena = cadena.substring(0, limite);
            return cadena;
        }else{
            return cadena;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAceptar;
    private javax.swing.JButton ButtonAnadir;
    private javax.swing.JButton ButtonCancelar;
    private javax.swing.JButton ButtonEquiposOpuestos;
    private javax.swing.JButton ButtonQuitar;
    private javax.swing.JCheckBox CheckBoxIdaVuelta;
    private javax.swing.JCheckBox CheckBoxSorteo;
    private javax.swing.JCheckBox CheckBoxTercerCuartoPuesto;
    private javax.swing.JComboBox ComboBoxDeportes;
    private javax.swing.ButtonGroup GrupoBotones1;
    private javax.swing.ButtonGroup GrupoBotonesSets;
    private javax.swing.JLabel LabelDeportes;
    private javax.swing.JLabel LabelIntroduzca;
    private javax.swing.JLabel LabelNombreTorneo;
    private javax.swing.JLabel LabelSets;
    private javax.swing.JLabel LabelTipoTorneo;
    private javax.swing.JLabel LabelTitulo;
    private javax.swing.JLabel LabelVuelta;
    private javax.swing.JList ListEquipos;
    private javax.swing.JPanel PanelEliminatorias;
    private javax.swing.JPanel PanelSets;
    private javax.swing.JRadioButton RadioButton3sets;
    private javax.swing.JRadioButton RadioButton5sets;
    private javax.swing.JRadioButton RadioButtonEliminatorias;
    private javax.swing.JRadioButton RadioButtonLiga;
    private javax.swing.JTextField TextFieldIntroduzca;
    private javax.swing.JTextField TextFieldNombreTorneo;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    
    /** MÉTODOS GETTERS AND SETTERS **/

    /**
     * @return the nuevoParticipante
     */
    public String getNuevoParticipante() {
        return nuevoParticipante;
    }

    /**
     * @param nuevoParticipante the nuevoParticipante to set
     */
    public void setNuevoParticipante(String nuevoParticipante) {
        this.nuevoParticipante = nuevoParticipante;
    }

    /**
     * @return the izquierdaEO
     */
    public ArrayList<String> getIzquierdaEO() {
        return izquierdaEO;
    }

    /**
     * @param izquierdaEO the izquierdaEO to set
     */
    public void setIzquierdaEO(ArrayList<String> izquierdaEO) {
        this.izquierdaEO = izquierdaEO;
    }

    /**
     * @return the derechaEO
     */
    public ArrayList<String> getDerechaEO() {
        return derechaEO;
    }

    /**
     * @param derechaEO the derechaEO to set
     */
    public void setDerechaEO(ArrayList<String> derechaEO) {
        this.derechaEO = derechaEO;
    }
}
