/*
        GNU GENERAL PUBLIC LICENSE (GPL)
            Version 3, 29 June 2007
        Copyright (C) Héctor Álvarez Castellano

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
package generador;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import metodos.Metodos;

/**
 *
 * @author Alvarielli
 */
public class ModTablasClasfDialog extends javax.swing.JDialog {

    //Variables de clase
    Metodos deporte;
    private static int tipo_torneo;
    ArrayList<JLabel> listaEtiquetas = new ArrayList<>();
    ArrayList<JSpinner> listaSpinners = new ArrayList<>();
    private int ancho_control = 100;//controla que el ancho sume exactamente 100
    private static int[] numc;
    private static String[] columnasClasf;
    private static int alturaClasf;
    
    //Constructor de clase
    public ModTablasClasfDialog(java.awt.Frame parent, boolean modal, int tipo_torneo, int[] numc, int alturaClasf, String[] columnasClasf) {
        super(parent, modal);
        //Variables que pasamos para realizar los cálculos del tamaño de las tablas
        this.tipo_torneo = tipo_torneo;
        this.numc = numc;
        this.alturaClasf = alturaClasf;
        this.columnasClasf = columnasClasf;
        //variables del JDialog
        initComponents();
        //Asignamos un panel y le damos un layout
        this.getContentPane().setLayout(new BorderLayout());
        panelContenedor = new JPanel();//Es importante meter el contenedor dentro del scroll (y no al revés)
        panelContenedor.setPreferredSize(new Dimension(200,600));
        panelContenedor.setLayout(new GridLayout(17, 4));
        //añadimos los paneles y el scroll al JDialog
        this.add(panelContenedor, BorderLayout.CENTER);
        this.add(panelBotones, BorderLayout.SOUTH);
        //scroll.setBounds(12, 215, 463, 423);
        scroll.setViewportView(panelContenedor);
        scroll.getViewport().setView(panelContenedor);
        this.add(scroll);
        //Código necesario para centrar el diálogo en pantalla
        setLocationRelativeTo(null);
        setTitle(java.util.ResourceBundle.getBundle("generador/Bundle_en_US").getString("MODIFICAR EL TAMAÑO DE LA TABLA"));
        //Si la bandera esta activa cargamos la tabla de clasificaciones
        crearBotones(columnasClasf, numc, alturaClasf);
        EtiquetaControlAncho.setText(Integer.toString(ancho_control));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        panelContenedor = new javax.swing.JPanel();
        panelBotones = new javax.swing.JPanel();
        ButtonCancelar = new javax.swing.JButton();
        ButtonAceptar = new javax.swing.JButton();
        EtiquetaControlAncho = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor);
        panelContenedor.setLayout(panelContenedorLayout);
        panelContenedorLayout.setHorizontalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );
        panelContenedorLayout.setVerticalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
        );

        scroll.setViewportView(panelContenedor);

        ButtonCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("generador/Bundle"); // NOI18N
        ButtonCancelar.setText(bundle.getString("ModTablasClasfDialog.ButtonCancelar.text")); // NOI18N
        ButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelarActionPerformed(evt);
            }
        });

        ButtonAceptar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonAceptar.setText(bundle.getString("ModTablasClasfDialog.ButtonAceptar.text")); // NOI18N
        ButtonAceptar.setToolTipText(bundle.getString("ModTablasClasfDialog.ButtonAceptar.toolTipText")); // NOI18N
        ButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAceptarActionPerformed(evt);
            }
        });

        EtiquetaControlAncho.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        EtiquetaControlAncho.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EtiquetaControlAncho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ButtonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EtiquetaControlAncho, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ButtonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelarActionPerformed
       //Cerramos el diálogo y volvemos a la pantalla original
        this.closeDialog(null);
    }//GEN-LAST:event_ButtonCancelarActionPerformed

    private void ButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAceptarActionPerformed
        int[] auxArrayClasf = new int[numc.length];//Completamente necesario inicializarlos
        int auxAlturaClasf;
        deporte = Principal.getMetodosDeporte();
        if(ancho_control == 100){
            //Guardamos los nuevos valores en un array de enteros
            for (int j = 0; j < listaSpinners.size() - 1; j++) {//Menos el spinner de la altura y otro porque es un índice
                auxArrayClasf[j] = validarEnterosMTD(listaSpinners.get(j).getValue().toString().trim());
            }
            auxAlturaClasf = (int) listaSpinners.get(listaSpinners.size() - 1).getValue();
            //Asignamos los datos de la tabla al archivo
            deporte.setDatosTablaClasf(auxArrayClasf, auxAlturaClasf);
            //Cerramos el diálogo y volvemos a la pantalla original
            this.closeDialog(null);
        }else{
            JOptionPane.showMessageDialog(this, "La suma de los anchos debe ser de 100%", "Error al insertar los datos", JOptionPane.ERROR_MESSAGE, null);
        }
    }//GEN-LAST:event_ButtonAceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModTablasClasfDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModTablasClasfDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModTablasClasfDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModTablasClasfDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ModTablasClasfDialog dialog = new ModTablasClasfDialog(new javax.swing.JFrame(), true, tipo_torneo, numc, alturaClasf, columnasClasf);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
     /**
     * Cierra el menú de torneo
     * @param evt 
     */
    private void closeDialog(java.awt.event.WindowEvent evt){
        setVisible(false);
        dispose();
    }
    
    /**
     * Método que creará los botones necesarios para aplicar los cambios según el número de opciones que ofrezca el deporte seleccionado
     * @param nombres
     * @param anchos
     * @param altura 
     */
    public void crearBotones(String[] nombres, int[] anchos, int altura){
        JLabel etiqueta;
        JSpinner spinner;
        int aux_nombres;
        //Vacíamos primero las listas
        listaEtiquetas.clear();
        listaSpinners.clear();
        //Utilizamos un for para crear tantos botones y etiquetas como sean necesarios (sumamos 1 para la altura)
        for (int i = 0; i < nombres.length; i++) {
            listaEtiquetas.add(new JLabel(nombres[i]));
            //Le damos estilo a las etiquetas
            listaEtiquetas.get(i).setFont(new java.awt.Font("Tahoma", 1, 12));
            listaEtiquetas.get(i).setHorizontalAlignment(javax.swing.JTextField.CENTER);
            listaEtiquetas.get(i).setVerticalAlignment(javax.swing.JTextField.CENTER);
            
            listaSpinners.add(new JSpinner(new SpinnerNumberModel(anchos[i], 2, 50, 1)));//Valor, min, max, incremento;
            //Le damos estilo a los spinners
            listaSpinners.get(i).setToolTipText("Modificar el ancho de " + nombres[i] + " (en tantos por ciento %)");
            //Le aplicamos a los anchos un listener que controle el ancho total
            listaSpinners.get(i).addChangeListener(new ChangeListener() {      
                @Override
                public void stateChanged(ChangeEvent e) {
                    //ponemos a cero la variable control
                    ancho_control = 0;//Y ahora calculamos
                    for (int j = 0; j < listaSpinners.size() - 1; j++) {//Menos el spinner de la altura
                        ancho_control += (int) listaSpinners.get(j).getValue();//hay que castear el valor obtenido
                    }
                    EtiquetaControlAncho.setText(Integer.toString(ancho_control));
                    EtiquetaControlAncho.repaint();              
                }//end stateChanged
            });//end addChangeListener
        }//end for
        //Añadimos la etiqueta y el spinner para la altura
        etiqueta = new JLabel("ALTURA FILAS");
        spinner = new JSpinner(new SpinnerNumberModel(altura, 20, 100, 1));//Valor, min, max, incremento;
        //Le damos estilo a las etiquetas
        etiqueta.setFont(new java.awt.Font("Tahoma", 1, 12));
        etiqueta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        etiqueta.setVerticalAlignment(javax.swing.JTextField.CENTER);
        listaEtiquetas.add(etiqueta);

        //Le damos estilo a los spinner
        spinner.setToolTipText("Modificar la altura de las filas (en píxeles)");
        listaSpinners.add(spinner);
        
        //Modifica el layout para las eliminatorias de tenis5sets y voleibol que se veian los botones revueltos (si superan 34 elementos y son menos de 51)
        if((listaSpinners.size() + listaEtiquetas.size()) > 34 && (listaSpinners.size() + listaEtiquetas.size()) < 51){
            panelContenedor.setLayout(new GridLayout(25, 2));
        }
        
        aux_nombres = listaEtiquetas.size();//Guardamos el dato en una variable auxiliar
        //Como lo hemos puesto a 68 posiciones, tenemos que engañar a la lista para que nos respete el Layout, para ello añadimos campos falsos que luego borraremos
        for (int i = aux_nombres; i < 34 ; i++) {//34 la mitad de 68
            listaEtiquetas.add(new JLabel("1"));//Añadimos etiquetas vacías
        }
        //Agregamos al panel los componentes
        for (int i = 0; i < nombres.length + 1; i++) {// +1 por ALTURA ETIQUETAS que lo añadimos después
            panelContenedor.add(listaEtiquetas.get(i));
            panelContenedor.add(listaSpinners.get(i));
        }
        //Eliminamos los elementos vacíos añadidos
        for (int i = 33; i > aux_nombres - 1 ; i--) {//34 la mitad de 68 (-1 pues ahora va en dirección contraria)
            listaEtiquetas.remove(i);//Añadimos etiquetas vacías
        } 
            
        this.validate();
    }//End of crearBotones
    
    /**
     * Comprueba que los valores insertados son números enteros
     * @param cadena
     * @return 
     */
    public int validarEnterosMTD(String cadena){
        int numero;
        //Comprobamos que no este la cadena vacía
        if(!cadena.equalsIgnoreCase("")){
        //Si la casilla está vacía ignoramos el chequeo, pues no hay información que comprobar
            try{
               //Casteamos la cadena pasada
              numero = Integer.parseInt(cadena);


              if(numero < 0){
                //Si lo recibido es un número negativo
                    JOptionPane.showMessageDialog(this, "Los valores deben ser números enteros no negativos", "Error al insertar los datos", JOptionPane.ERROR_MESSAGE, null);
                numero = -1;
                return numero;
              }else{
                return numero;
              }
            }catch(NumberFormatException nfe){
                    JOptionPane.showMessageDialog(this, "Los números indicados no son válidos, inserte números enteros", "Error al insertar los datos", JOptionPane.ERROR_MESSAGE, null);
            }
            numero = -1;
            return numero;
        }//End if de chequeo de cadena
            return -1;//Devolvemos el número que será tratado por nuestro programa
    }//End of validarEnteros()
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAceptar;
    private javax.swing.JButton ButtonCancelar;
    private javax.swing.JLabel EtiquetaControlAncho;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables

}
